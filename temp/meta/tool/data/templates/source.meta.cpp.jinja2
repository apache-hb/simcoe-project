/** This file is generated by the meta reflection tool. */
/** Changes to this file will be lost. */

#include "{{ header }}"

{% for enum in enums %}
std::string_view {{ enum.namespace }}::toString({{ enum.name }} it) noexcept {
    switch (it) {
    using enum {{ enum.name }};
    {% for member in enum.members %}case {{ member.name }}: return "{{ member.name }}";
    {% endfor %}default: return "Unknown";
    }
}
{% endfor %}

{% for cls in classes %}
template<> struct sm::reflect::detail::ClassImpl<{{ cls.namespace }}::{{ cls.name }}> {
    static constexpr std::string_view kName = "{{ cls.name }}";
    static constexpr std::string_view kNamespace = "{{ cls.namespace }}";
};
{% endfor %}
