module sm::system;

import "core/win32.h";

// internal types

export variant WindowMode : uint8 {
    default Windowed = 0
    case Borderless = 1
}

export struct WindowInfo {
    mode: WindowMode;
    width: int;
    height: int;
    center: bool;
    title: string;
}

export variant FileVersion : uint32 {
    case Version0 = 0
}

export struct FileHeader {
    magic: uint32; // 'CUM\0'
    version: FileVersion;
    size: uint32;
    checksum: uint32;
}

// win32 types

[[facade]]
export variant ShowWindow : uint {
    case Hide = opaque(SW_HIDE)
    case ShowNormal = opaque(SW_SHOWNORMAL)
    case Show = opaque(SW_SHOW)
    case Restore = opaque(SW_RESTORE)
    case ShowDefault = opaque(SW_SHOWDEFAULT)
}

[[external]]
export struct RECT {
    left: long;
    top: long;
    right: long;
    bottom: long;
}

[[external]]
export struct POINT {
    x: long;
    y: long;
}

[[external]]
export struct WINDOWPLACEMENT {
    length: uint;
    flags: uint;
    showCmd: ShowWindow;
    ptMinPosition: POINT;
    ptMaxPosition: POINT;
    rcNormalPosition: RECT;
}
