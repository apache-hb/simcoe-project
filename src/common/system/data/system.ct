module sm::system;

import "core/units.hpp";

import "core/win32.hpp";

// internal types

[[facade]]
variant WindowMode : uint32 {
    default Windowed = opaque(WS_OVERLAPPEDWINDOW)
    case Borderless = opaque(WS_POPUP)
}

// win32 types

[[facade]]
variant MultiMonitor : ulong {
    default Null = opaque(MONITOR_DEFAULTTONULL)
    case Primary = opaque(MONITOR_DEFAULTTOPRIMARY)
    case Nearest = opaque(MONITOR_DEFAULTTONEAREST)
}

[[facade]]
variant ShowWindow : int {
    case Hide = opaque(SW_HIDE)
    case ShowNormal = opaque(SW_SHOWNORMAL)
    case Show = opaque(SW_SHOW)
    case Restore = opaque(SW_RESTORE)
    case ShowDefault = opaque(SW_SHOWDEFAULT)
}

[[external]]
struct RECT {
    left: long;
    top: long;
    right: long;
    bottom: long;
}

[[external]]
struct POINT {
    x: long;
    y: long;
}

[[external]]
struct WINDOWPLACEMENT {
    length: uint;
    flags: uint;
    showCmd: ShowWindow;
    ptMinPosition: POINT;
    ptMaxPosition: POINT;
    rcNormalPosition: RECT;
}
