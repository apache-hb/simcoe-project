module sm::sys;

import "logs/logs.hpp";
import "core/units.hpp";
import "core/win32.h";

// internal types

variant WindowMode : uint8 {
    default Windowed = 0
    case Borderless = 1
}

struct WindowConfig {
    mode: WindowMode;
    width: int;
    height: int;
    title: string;
    logger: &opaque("sm::logs::ILogger");
}

variant FileVersion : uint32 {
    case Version0 = 0
}

struct MappingConfig {
    path: string;
    size: opaque("sm::Memory");
    record_count: fast16;
    logger: &opaque("sm::logs::ILogger");
}

struct FileHeader {
    magic: uint32; // 'CUM\0'
    version: FileVersion;
    size: uint32;
    checksum: uint32;
    count: uint16; // number of records
    used: uint16; // number of records slots used
}

struct RecordHeader {
    id: uint32; // matches typeid of the record
    offset: uint16; // offset from the start of the data region
    size: uint16; // size of the record
}

variant RecordLookup {
    case Created = 0
    case Opened = 1
    case RecordTableExhausted = 2
    case DataRegionExhausted = 3
    default RecordInvalid = 4

    const def has_valid_data(): bool;
}

// win32 types

[[facade]]
variant MultiMonitor : ulong {
    default Null = opaque(MONITOR_DEFAULTTONULL)
    case Primary = opaque(MONITOR_DEFAULTTOPRIMARY)
    case Nearest = opaque(MONITOR_DEFAULTTONEAREST)
}

[[facade]]
variant ShowWindow : int {
    case Hide = opaque(SW_HIDE)
    case ShowNormal = opaque(SW_SHOWNORMAL)
    case Show = opaque(SW_SHOW)
    case Restore = opaque(SW_RESTORE)
    case ShowDefault = opaque(SW_SHOWDEFAULT)
}

[[external]]
struct RECT {
    left: long;
    top: long;
    right: long;
    bottom: long;
}

[[external]]
struct POINT {
    x: long;
    y: long;
}

[[external]]
struct WINDOWPLACEMENT {
    length: uint;
    flags: uint;
    showCmd: ShowWindow;
    ptMinPosition: POINT;
    ptMaxPosition: POINT;
    rcNormalPosition: RECT;
}
