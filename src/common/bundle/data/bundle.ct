module sm::bundle;

import "<vector>";

[[layout(export)]]
variant AssetType : uint16 {
    [[format("invalid")]] default Invalid = 0
    [[format("shader")]] case ShaderProgram = 1
    [[format("texture")]] case Texture = 2
    [[format("mesh")]] case Mesh = 3
    [[format("anim")]] case Animation = 4
    [[format("font")]] case Font = 5
    [[format("license")]] case Legal = 6
}

[[layout(export)]]
variant BundleVersion : uint16 {
    default CurrentVersion = 0
    [[format("24/01/24")]] case Version0 = 0
}

[[layout(export)]]
variant DataFormat : uint16 {
    [[format("unknown")]]
    default UNKNOWN = 0

    [[format("rgb32/float")]]
    case RGB32_FLOAT = 1

    [[format("rgba32/float")]]
    case RGBA32_FLOAT = 2

    [[format("bc7/typeless")]]
    case BC7_TYPELESS = 3

    [[format("bc7/unorm")]]
    case BC7_UNORM = 4

    [[format("bc7/srgb")]]
    case BC7_SRGB = 5

    [[format("rgba8/unorm")]]
    case RGBA8_UNORM = 6

    [[format("rgba8/uint")]]
    case RGBA8_UINT = 7
}

[[layout(export)]]
struct Bundle {
    magic: uint32; // 'BNDL'
    checksum: uint32;
    version: BundleVersion;
}

[[layout(export)]]
struct ShaderBytecode {
    name: string;
    size: uint16;
    data: opaque("std::vector<uint8_t>");
}

[[layout(export)]]
struct Texture {
    name: string;
    width: uint16;
    height: uint16;
    format: DataFormat;
    data: opaque("std::vector<uint8_t>");
}
