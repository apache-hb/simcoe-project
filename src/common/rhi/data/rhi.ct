module sm::rhi;

import "logs/logs.hpp";

import "<dxgi1_6.h>";
import "<d3d12.h>";
import "<dxgidebug.h>";

[[facade]]
variant FeatureLevel : opaque(D3D_FEATURE_LEVEL) {
    [[format("level.11.0")]] case Level_11_0 = opaque(D3D_FEATURE_LEVEL_11_0)
    [[format("level.11.1")]] case Level_11_1 = opaque(D3D_FEATURE_LEVEL_11_1)
    [[format("level.12.0")]] case Level_12_0 = opaque(D3D_FEATURE_LEVEL_12_0)
    [[format("level.12.1")]] case Level_12_1 = opaque(D3D_FEATURE_LEVEL_12_1)
    [[format("level.12.2")]] case Level_12_2 = opaque(D3D_FEATURE_LEVEL_12_2)
}

[[facade, bitflags]]
variant AdapterPreference : opaque(DXGI_GPU_PREFERENCE) {
    default Default = opaque(DXGI_GPU_PREFERENCE_UNSPECIFIED)
    case MinimumPower = opaque(DXGI_GPU_PREFERENCE_MINIMUM_POWER)
    case HighPerformance = opaque(DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE)
}

[[facade, bitflags]]
variant AdapterFlag : opaque(DXGI_ADAPTER_FLAG) {
    default None = opaque(DXGI_ADAPTER_FLAG_NONE)
    case Remote = opaque(DXGI_ADAPTER_FLAG_REMOTE)
    case Software = opaque(DXGI_ADAPTER_FLAG_SOFTWARE)
}

[[external]]
struct DXGI_ADAPTER_DESC1 {
    VendorId: uint;
    DeviceId: uint;
    SubSysId: uint;
    Revision: uint;
    DedicatedVideoMemory: usize;
    DedicatedSystemMemory: usize;
    SharedSystemMemory: usize;

    Flags: AdapterFlag;
}

[[bitflags]]
variant DebugFlags : uint8 {
    default None = 0
    case DeviceDebugLayer = (1 << 0) // d3d12 debug layer
    case FactoryDebug = (1 << 1) // dxgi debug layer
    case DeviceRemovedInfo = (1 << 2) // dred
    case InfoQueue = (1 << 3) // d3d12 debug layer
}

struct RenderConfig {
    debug_flags: DebugFlags;

    dsv_heap_size: uint32;
    rtv_heap_size: uint32;
    cbv_srv_uav_heap_size: uint32;

    adapter_lookup: AdapterPreference;
    adapter_index: uint32;
    software_adapter: bool;
    feature_level: FeatureLevel;

    [[transient]] hwnd: opaque(HWND);
    [[transient]] logger: &opaque("sm::logs::ILogger");
}
