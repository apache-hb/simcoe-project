module sm::rhi;

import "logs/logs.hpp";
import "system/window.hpp";
import "math/math.hpp";
import "bundle/bundle.hpp";

import "rhi/types.hpp";

using DataFormat = opaque("sm::bundle::DataFormat")
using Window = opaque("sm::sys::Window")
using ILogger = opaque("sm::logs::ILogger")

[[facade]]
variant MessageCategory : opaque(D3D12_MESSAGE_CATEGORY) {
    case App = opaque(D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED)
    case Other = opaque(D3D12_MESSAGE_CATEGORY_MISCELLANEOUS)
    case Init = opaque(D3D12_MESSAGE_CATEGORY_INITIALIZATION)
    case Cleanup = opaque(D3D12_MESSAGE_CATEGORY_CLEANUP)
    case Compile = opaque(D3D12_MESSAGE_CATEGORY_COMPILATION)
    case StateCreation = opaque(D3D12_MESSAGE_CATEGORY_STATE_CREATION)
    case StateSetting = opaque(D3D12_MESSAGE_CATEGORY_STATE_SETTING)
    case StateGetting = opaque(D3D12_MESSAGE_CATEGORY_STATE_GETTING)
    case ResourceUpdate = opaque(D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION)
    case Execution = opaque(D3D12_MESSAGE_CATEGORY_EXECUTION)
    case Shader = opaque(D3D12_MESSAGE_CATEGORY_SHADER)
}

[[facade]]
variant MessageSeverity : opaque(D3D12_MESSAGE_SEVERITY) {
    case Corruption = opaque(D3D12_MESSAGE_SEVERITY_CORRUPTION)
    case Error = opaque(D3D12_MESSAGE_SEVERITY_ERROR)
    case Warning = opaque(D3D12_MESSAGE_SEVERITY_WARNING)
    case Info = opaque(D3D12_MESSAGE_SEVERITY_INFO)
    case Message = opaque(D3D12_MESSAGE_SEVERITY_MESSAGE)

    const def get_log_severity(): opaque("sm::logs::Severity");
}

[[facade]]
variant MessageID : opaque(D3D12_MESSAGE_ID) {
    default Unknown = opaque(D3D12_MESSAGE_ID_UNKNOWN)
    // dont fill in the rest, theres over 1000 of them
    // we'll add them as we need them
}

[[facade]]
variant FeatureLevel : opaque(D3D_FEATURE_LEVEL) {
    [[format("level.11.0")]] case Level_11_0 = opaque(D3D_FEATURE_LEVEL_11_0)
    [[format("level.11.1")]] case Level_11_1 = opaque(D3D_FEATURE_LEVEL_11_1)
    [[format("level.12.0")]] case Level_12_0 = opaque(D3D_FEATURE_LEVEL_12_0)
    [[format("level.12.1")]] case Level_12_1 = opaque(D3D_FEATURE_LEVEL_12_1)
    [[format("level.12.2")]] case Level_12_2 = opaque(D3D_FEATURE_LEVEL_12_2)
}

[[facade, bitflags]]
variant AdapterPreference : opaque(DXGI_GPU_PREFERENCE) {
    [[format("default")]] default Default = opaque(DXGI_GPU_PREFERENCE_UNSPECIFIED)
    [[format("low_power")]] case MinimumPower = opaque(DXGI_GPU_PREFERENCE_MINIMUM_POWER)
    [[format("high_performance")]] case HighPerformance = opaque(DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE)
}

[[facade, bitflags]]
variant AdapterFlag : opaque(DXGI_ADAPTER_FLAG) {
    [[format("none")]] default None = opaque(DXGI_ADAPTER_FLAG_NONE)
    [[format("remote")]] case Remote = opaque(DXGI_ADAPTER_FLAG_REMOTE)
    [[format("software")]] case Software = opaque(DXGI_ADAPTER_FLAG_SOFTWARE)
}

[[facade]]
variant RootSignatureVersion : opaque(D3D_ROOT_SIGNATURE_VERSION) {
    [[format("version.1.0")]] case Version_1_0 = opaque(D3D_ROOT_SIGNATURE_VERSION_1_0)
    [[format("version.1.1")]] case Version_1_1 = opaque(D3D_ROOT_SIGNATURE_VERSION_1_1)
}

[[facade]]
variant DescriptorHeapType : opaque(D3D12_DESCRIPTOR_HEAP_TYPE) {
    [[format("cbv/srv/uav")]] case CBV_SRV_UAV = opaque(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV)
    [[format("sampler")]] case Sampler = opaque(D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER)
    [[format("rtv")]] case RTV = opaque(D3D12_DESCRIPTOR_HEAP_TYPE_RTV)
    [[format("dsv")]] case DSV = opaque(D3D12_DESCRIPTOR_HEAP_TYPE_DSV)
}

[[facade]]
variant CommandListType : opaque(D3D12_COMMAND_LIST_TYPE) {
    [[format("direct")]] case Direct = opaque(D3D12_COMMAND_LIST_TYPE_DIRECT)
    [[format("bundle")]] case Bundle = opaque(D3D12_COMMAND_LIST_TYPE_BUNDLE)
    [[format("compute")]] case Compute = opaque(D3D12_COMMAND_LIST_TYPE_COMPUTE)
    [[format("copy")]] case Copy = opaque(D3D12_COMMAND_LIST_TYPE_COPY)
}

struct DescriptorHeapConfig {
    type: DescriptorHeapType;
    size: uint32;
    shader_visible: bool;
}

using InnerResourceState = opaque(D3D12_RESOURCE_STATES)

variant ResourceState {
    default Invalid = 0

    case Present = 1
    case RenderTarget = 2

    case IndexBuffer = 3
    case VertexBuffer = 4
    case ConstBuffer = 5

    case CopySource = 6
    case CopyTarget = 7

    case DepthRead = 8
    case DepthWrite = 9

    case PixelShaderTextureRead = 10
    case ShaderResourceTextureRead = 11
    case TextureWrite = 12

    const def get_inner_state(): InnerResourceState;
}

[[bitflags]]
variant DebugFlags {
    [[format("none")]] default None = 0
    [[format("device")]] case DeviceDebugLayer = (1 << 0) // d3d12 debug layer
    [[format("factory")]] case FactoryDebug = (1 << 1) // dxgi debug layer
    [[format("dred")]] case DeviceRemovedInfo = (1 << 2) // dred
    [[format("queue")]] case InfoQueue = (1 << 3) // d3d12 debug layer
    [[format("auto_name")]] case AutoName = (1 << 4) // automatically name objects
}

[[facade]]
variant Filter : opaque(D3D12_FILTER) {
    case MinMagMipLinear = opaque(D3D12_FILTER_MIN_MAG_MIP_LINEAR)
}

[[facade]]
variant AddressMode : opaque(D3D12_TEXTURE_ADDRESS_MODE) {
    case Border = opaque(D3D12_TEXTURE_ADDRESS_MODE_BORDER)
}

[[facade]]
variant ShaderVisibility : opaque(D3D12_SHADER_VISIBILITY) {
    case Vertex = opaque(D3D12_SHADER_VISIBILITY_VERTEX)
    case Pixel = opaque(D3D12_SHADER_VISIBILITY_PIXEL)
}

using DescriptorRangeType = opaque(D3D12_DESCRIPTOR_RANGE_TYPE)

variant BindingType {
    case Texture = 0
    case Uniform = 1

    const def get_range_type(): DescriptorRangeType;
}

// D3D12_STATIC_SAMPLER_DESC
struct StaticSampler {
    filter: Filter; // Filter
    address: AddressMode; // AddressU, AddressV, AddressW
    reg: uint;
}

// thin layer over D3D12_INPUT_ELEMENT_DESC
struct InputElement {
    name: string; // SemanticName
    format: DataFormat; // Format
    offset: uint; // AlignedByteOffset
}

struct ResourceBinding {
    name: string;
    visibility: ShaderVisibility;
    binding: BindingType;
    reg: uint;
    space: uint;
}

struct InputLayout {
    elements: const *const InputElement;
    count: uint;
}

struct ResourceLayout {
    bindings: const *const ResourceBinding;
    count: uint;
}

struct SamplerLayout {
    samplers: const *const StaticSampler;
    count: uint;
}

struct ShaderData {
    data: memory;
    size: usize;
}

struct GraphicsPipelineConfig {
    elements: InputLayout;
    resources: ResourceLayout;
    samplers: SamplerLayout;
    vs: ShaderData;
    ps: ShaderData;
}

struct RenderConfig {
    debug_flags: DebugFlags;

    buffer_count: uint;
    buffer_format: DataFormat;

    rtv_heap_size: uint32;

    adapter_lookup: AdapterPreference;
    adapter_index: uint32;
    software_adapter: bool;
    feature_level: FeatureLevel;

    window: &Window;
    logger: &ILogger;
}
