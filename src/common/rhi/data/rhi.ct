module sm::rhi;

import "logs/logs.hpp";

import "<span>";

import "<dxgi1_6.h>";
import "<d3d12.h>";
import "<dxgidebug.h>";

[[facade]]
variant MessageCategory : opaque(D3D12_MESSAGE_CATEGORY) {
    case App = opaque(D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED)
    case Other = opaque(D3D12_MESSAGE_CATEGORY_MISCELLANEOUS)
    case Init = opaque(D3D12_MESSAGE_CATEGORY_INITIALIZATION)
    case Cleanup = opaque(D3D12_MESSAGE_CATEGORY_CLEANUP)
    case Compile = opaque(D3D12_MESSAGE_CATEGORY_COMPILATION)
    case StateCreation = opaque(D3D12_MESSAGE_CATEGORY_STATE_CREATION)
    case StateSetting = opaque(D3D12_MESSAGE_CATEGORY_STATE_SETTING)
    case StateGetting = opaque(D3D12_MESSAGE_CATEGORY_STATE_GETTING)
    case ResourceUpdate = opaque(D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION)
    case Execution = opaque(D3D12_MESSAGE_CATEGORY_EXECUTION)
    case Shader = opaque(D3D12_MESSAGE_CATEGORY_SHADER)
}

[[facade]]
variant MessageSeverity : opaque(D3D12_MESSAGE_SEVERITY) {
    case Corruption = opaque(D3D12_MESSAGE_SEVERITY_CORRUPTION)
    case Error = opaque(D3D12_MESSAGE_SEVERITY_ERROR)
    case Warning = opaque(D3D12_MESSAGE_SEVERITY_WARNING)
    case Info = opaque(D3D12_MESSAGE_SEVERITY_INFO)
    case Message = opaque(D3D12_MESSAGE_SEVERITY_MESSAGE)

    const def get_log_severity(): opaque("sm::logs::Severity");
}

[[facade]]
variant MessageID : opaque(D3D12_MESSAGE_ID) {
    default Unknown = opaque(D3D12_MESSAGE_ID_UNKNOWN)
    // dont fill in the rest, theres over 1000 of them
    // we'll add them as we need them
}

[[facade]]
variant FeatureLevel : opaque(D3D_FEATURE_LEVEL) {
    [[format("level.11.0")]] case Level_11_0 = opaque(D3D_FEATURE_LEVEL_11_0)
    [[format("level.11.1")]] case Level_11_1 = opaque(D3D_FEATURE_LEVEL_11_1)
    [[format("level.12.0")]] case Level_12_0 = opaque(D3D_FEATURE_LEVEL_12_0)
    [[format("level.12.1")]] case Level_12_1 = opaque(D3D_FEATURE_LEVEL_12_1)
    [[format("level.12.2")]] case Level_12_2 = opaque(D3D_FEATURE_LEVEL_12_2)
}

[[facade, bitflags]]
variant AdapterPreference : opaque(DXGI_GPU_PREFERENCE) {
    [[format("default")]] default Default = opaque(DXGI_GPU_PREFERENCE_UNSPECIFIED)
    [[format("low_power")]] case MinimumPower = opaque(DXGI_GPU_PREFERENCE_MINIMUM_POWER)
    [[format("high_performance")]] case HighPerformance = opaque(DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE)
}

[[facade, bitflags]]
variant AdapterFlag : opaque(DXGI_ADAPTER_FLAG) {
    [[format("none")]] default None = opaque(DXGI_ADAPTER_FLAG_NONE)
    [[format("remote")]] case Remote = opaque(DXGI_ADAPTER_FLAG_REMOTE)
    [[format("software")]] case Software = opaque(DXGI_ADAPTER_FLAG_SOFTWARE)
}

[[facade]]
variant RootSignatureVersion : opaque(D3D_ROOT_SIGNATURE_VERSION) {
    [[format("version.1.0")]] case Version_1_0 = opaque(D3D_ROOT_SIGNATURE_VERSION_1_0)
    [[format("version.1.1")]] case Version_1_1 = opaque(D3D_ROOT_SIGNATURE_VERSION_1_1)
}

[[facade]]
variant TypeFormat : opaque(DXGI_FORMAT) {
    default Unknown = opaque(DXGI_FORMAT_UNKNOWN)

    case Float32x3 = opaque(DXGI_FORMAT_R32G32B32_FLOAT)
    case Float32x4 = opaque(DXGI_FORMAT_R32G32B32A32_FLOAT)
}

[[facade]]
variant InputClassifier : opaque(D3D12_INPUT_CLASSIFICATION) {
    case PerVertex = opaque(D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA)
    case PerInstance = opaque(D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA)
}

[[external]]
struct DXGI_ADAPTER_DESC1 {
    VendorId: uint;
    DeviceId: uint;
    SubSysId: uint;
    Revision: uint;
    DedicatedVideoMemory: usize;
    DedicatedSystemMemory: usize;
    SharedSystemMemory: usize;

    Flags: AdapterFlag;
}

[[external]]
struct D3D12_INPUT_ELEMENT_DESC {
    SemanticName: string;
    SemanticIndex: uint;
    Format: TypeFormat;
    InputSlot: uint;
    AlignedByteOffset: uint;
    InputSlotClass: InputClassifier;
    InstanceDataStepRate: uint;
}

struct PipelineStateConfig {
    version: RootSignatureVersion;

    input_layout: opaque("std::span<const D3D12_INPUT_ELEMENT_DESC>");

    vertex_shader: opaque("std::span<const std::byte>");
    pixel_shader: opaque("std::span<const std::byte>");
}

[[bitflags]]
variant DebugFlags : uint8 {
    [[format("none")]] default None = 0
    [[format("device")]] case DeviceDebugLayer = (1 << 0) // d3d12 debug layer
    [[format("factory")]] case FactoryDebug = (1 << 1) // dxgi debug layer
    [[format("dred")]] case DeviceRemovedInfo = (1 << 2) // dred
    [[format("queue")]] case InfoQueue = (1 << 3) // d3d12 debug layer
}

struct RenderConfig {
    debug_flags: DebugFlags;

    buffer_count: uint;

    dsv_heap_size: uint32;
    rtv_heap_size: uint32;
    cbv_srv_uav_heap_size: uint32;

    adapter_lookup: AdapterPreference;
    adapter_index: uint32;
    software_adapter: bool;
    feature_level: FeatureLevel;

    [[transient]] window: &opaque("sm::sys::Window");
    [[transient]] logger: &opaque("sm::logs::ILogger");
}
