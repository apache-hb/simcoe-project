module sm::threads;

import "core/win32.h";
import "<windef.h>";
import "<winbase.h>";

// this doesnt expose the padding that the struct has
[[external]]
struct GROUP_AFFINITY {
    Mask: uint64;
    Group: uint16;
}

[[ordered]]
variant ThreadClass {
    // this does *NOT* map to windows realtime priority class
    // stuff that really needs to be done quickly or the user will notice
    // really just audio
    [[format("realtime")]] case Realtime = 0

    // stuff that should be pretty responsive
    // rendering, input, game thread, etc
    [[format("normal")]] case Normal = 1

    // worker threads, stuff like shader compiling
    // disk io, network io, etc
    [[format("worker")]] case Worker = 2

    // very low priority, only used for background tasks
    // stuff like polling once a second or less
    [[format("idle")]] case Idle = 3
}

[[facade, ordered]]
variant PriorityClass : uint32 {
    [[format("high")]] case High = opaque(HIGH_PRIORITY_CLASS)
    [[format("normal")]] default Normal = opaque(NORMAL_PRIORITY_CLASS)
    [[format("idle")]] case Idle = opaque(IDLE_PRIORITY_CLASS)
}

struct SchedulerConfig {
    worker_count: uint16;
    process_priority: PriorityClass;
}
