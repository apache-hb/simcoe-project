module sm::render;

import "system/window.hpp";
import "logs/logs.hpp";

import "<d3d12.h>";
import "<dxgi1_6.h>";
import "<dxgidebug.h>";

using Window = opaque("sm::sys::Window")
using ILogger = opaque("sm::logs::ILogger")

[[facade]]
variant FeatureLevel : opaque(D3D_FEATURE_LEVEL) {
    [[format("level.11.0")]] case Level_11_0 = opaque(D3D_FEATURE_LEVEL_11_0)
    [[format("level.11.1")]] case Level_11_1 = opaque(D3D_FEATURE_LEVEL_11_1)
    [[format("level.12.0")]] case Level_12_0 = opaque(D3D_FEATURE_LEVEL_12_0)
    [[format("level.12.1")]] case Level_12_1 = opaque(D3D_FEATURE_LEVEL_12_1)
    [[format("level.12.2")]] case Level_12_2 = opaque(D3D_FEATURE_LEVEL_12_2)
}

[[facade, bitflags]]
variant AdapterPreference : opaque(DXGI_GPU_PREFERENCE) {
    [[format("default")]] default Default = opaque(DXGI_GPU_PREFERENCE_UNSPECIFIED)
    [[format("low_power")]] case MinimumPower = opaque(DXGI_GPU_PREFERENCE_MINIMUM_POWER)
    [[format("high_performance")]] case HighPerformance = opaque(DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE)
}

[[facade, bitflags]]
variant AdapterFlag : uint {
    [[format("none")]] default None = opaque(DXGI_ADAPTER_FLAG_NONE)
    [[format("remote")]] case Remote = opaque(DXGI_ADAPTER_FLAG_REMOTE)
    [[format("software")]] case Software = opaque(DXGI_ADAPTER_FLAG_SOFTWARE)
}

[[facade]]
variant RootSignatureVersion : opaque(D3D_ROOT_SIGNATURE_VERSION) {
    [[format("version.1.0")]] case Version_1_0 = opaque(D3D_ROOT_SIGNATURE_VERSION_1_0)
    [[format("version.1.1")]] case Version_1_1 = opaque(D3D_ROOT_SIGNATURE_VERSION_1_1)
}

[[facade]]
variant DescriptorHeapType : opaque(D3D12_DESCRIPTOR_HEAP_TYPE) {
    [[format("cbv/srv/uav")]] case CBV_SRV_UAV = opaque(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV)
    [[format("sampler")]] case Sampler = opaque(D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER)
    [[format("rtv")]] case RTV = opaque(D3D12_DESCRIPTOR_HEAP_TYPE_RTV)
    [[format("dsv")]] case DSV = opaque(D3D12_DESCRIPTOR_HEAP_TYPE_DSV)
}

[[facade]]
variant CommandListType : opaque(D3D12_COMMAND_LIST_TYPE) {
    [[format("direct")]] case Direct = opaque(D3D12_COMMAND_LIST_TYPE_DIRECT)
    [[format("bundle")]] case Bundle = opaque(D3D12_COMMAND_LIST_TYPE_BUNDLE)
    [[format("compute")]] case Compute = opaque(D3D12_COMMAND_LIST_TYPE_COMPUTE)
    [[format("copy")]] case Copy = opaque(D3D12_COMMAND_LIST_TYPE_COPY)
}

[[bitflags]]
variant DebugFlags {
    [[format("none")]] default None = 0
    [[format("device")]] case DeviceDebugLayer = (1 << 0) // d3d12 debug layer
    [[format("factory")]] case FactoryDebug = (1 << 1) // dxgi debug layer
    [[format("dred")]] case DeviceRemovedInfo = (1 << 2) // dred
    [[format("queue")]] case InfoQueue = (1 << 3) // d3d12 debug layer
    [[format("auto name")]] case AutoName = (1 << 4) // automatically name objects
    [[format("warp adapter")]] case WarpAdapter = (1 << 5) // use software renderer
}

struct RenderConfig {
    window: &Window;
    logger: &ILogger;

    adapter_index: uint;
    adapter_preference: AdapterPreference;
    feature_level: FeatureLevel;
    debug_flags: DebugFlags;

    frame_count: ufast8;

    command_pool_size: ufast8;
    resource_pool_size: ufast16;
}
