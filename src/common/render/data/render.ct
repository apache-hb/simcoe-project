module sm::render;

import "system/window.hpp";
import "logs/logs.hpp";
import "render/object.hpp";

using Window = opaque("sm::sys::Window")
using ILogger = opaque("sm::logs::ILogger")

///
/// device creation + adapter enumeration
///

[[facade]]
variant FeatureLevel : opaque(D3D_FEATURE_LEVEL) {
    [[format("level 11.0")]] case Level_11_0 = opaque(D3D_FEATURE_LEVEL_11_0)
    [[format("level 11.1")]] case Level_11_1 = opaque(D3D_FEATURE_LEVEL_11_1)
    [[format("level 12.0")]] case Level_12_0 = opaque(D3D_FEATURE_LEVEL_12_0)
    [[format("level 12.1")]] case Level_12_1 = opaque(D3D_FEATURE_LEVEL_12_1)
    [[format("level 12.2")]] case Level_12_2 = opaque(D3D_FEATURE_LEVEL_12_2)
}

[[facade]]
variant AdapterPreference : opaque(DXGI_GPU_PREFERENCE) {
    [[format("any")]] default Default = opaque(DXGI_GPU_PREFERENCE_UNSPECIFIED)
    [[format("low power")]] case MinimumPower = opaque(DXGI_GPU_PREFERENCE_MINIMUM_POWER)
    [[format("high performance")]] case HighPerformance = opaque(DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE)
}

[[bitflags]]
variant DebugFlags {
    [[format("none")]] default None = 0
    [[format("device")]] case DeviceDebugLayer = (1 << 0) // d3d12 debug layer
    [[format("factory")]] case FactoryDebug = (1 << 1) // dxgi debug layer
    [[format("dred")]] case DeviceRemovedInfo = (1 << 2) // dred
    [[format("queue")]] case InfoQueue = (1 << 3) // d3d12 debug layer
    [[format("auto name")]] case AutoName = (1 << 4) // automatically name objects
    [[format("warp adapter")]] case WarpAdapter = (1 << 5) // use software renderer
    [[format("gpu validation")]] case GpuValidation = (1 << 6) // gpu validation
}

[[facade, bitflags]]
variant AdapterFlag : uint {
    [[format("none"), empty]] default None = opaque(DXGI_ADAPTER_FLAG_NONE)
    [[format("remote")]] case Remote = opaque(DXGI_ADAPTER_FLAG_REMOTE)
    [[format("software")]] case Software = opaque(DXGI_ADAPTER_FLAG_SOFTWARE)
}

[[facade]]
variant RootSignatureVersion : opaque(D3D_ROOT_SIGNATURE_VERSION) {
    [[format("version 1.0")]] default Version_1_0 = opaque(D3D_ROOT_SIGNATURE_VERSION_1_0)
    [[format("version 1.1")]] case Version_1_1 = opaque(D3D_ROOT_SIGNATURE_VERSION_1_1)
    [[format("version 1.2")]] case Version_1_2 = opaque(D3D_ROOT_SIGNATURE_VERSION_1_2)
}

[[facade]]
variant Format : opaque(DXGI_FORMAT) {
    default Unknown = opaque(DXGI_FORMAT_UNKNOWN)
    case RGBA8_UNORM = opaque(DXGI_FORMAT_R8G8B8A8_UNORM)
    case F32_DEPTH = opaque(DXGI_FORMAT_D32_FLOAT)
}

[[facade, bitflags]]
variant ResourceState : opaque(D3D12_RESOURCE_STATES) {
    case Common = opaque(D3D12_RESOURCE_STATE_COMMON)
    case Present = opaque(D3D12_RESOURCE_STATE_PRESENT)
    case RenderTarget = opaque(D3D12_RESOURCE_STATE_RENDER_TARGET)
    case PixelShaderResource = opaque(D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE)
    case DepthWrite = opaque(D3D12_RESOURCE_STATE_DEPTH_WRITE)
}

[[facade]]
variant DescriptorType : opaque(D3D12_DESCRIPTOR_HEAP_TYPE) {
    case RTV = opaque(D3D12_DESCRIPTOR_HEAP_TYPE_RTV)
    case DSV = opaque(D3D12_DESCRIPTOR_HEAP_TYPE_DSV)
    case SRV = opaque(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV)
}

///
/// info queue logging
///

[[facade]]
variant MessageCategory : opaque(D3D12_MESSAGE_CATEGORY) {
    case App = opaque(D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED)
    case Other = opaque(D3D12_MESSAGE_CATEGORY_MISCELLANEOUS)
    case Init = opaque(D3D12_MESSAGE_CATEGORY_INITIALIZATION)
    case Cleanup = opaque(D3D12_MESSAGE_CATEGORY_CLEANUP)
    case Compile = opaque(D3D12_MESSAGE_CATEGORY_COMPILATION)
    case StateCreation = opaque(D3D12_MESSAGE_CATEGORY_STATE_CREATION)
    case StateSetting = opaque(D3D12_MESSAGE_CATEGORY_STATE_SETTING)
    case StateGetting = opaque(D3D12_MESSAGE_CATEGORY_STATE_GETTING)
    case ResourceUpdate = opaque(D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION)
    case Execution = opaque(D3D12_MESSAGE_CATEGORY_EXECUTION)
    case Shader = opaque(D3D12_MESSAGE_CATEGORY_SHADER)
}

[[facade]]
variant MessageSeverity : opaque(D3D12_MESSAGE_SEVERITY) {
    case Corruption = opaque(D3D12_MESSAGE_SEVERITY_CORRUPTION)
    case Error = opaque(D3D12_MESSAGE_SEVERITY_ERROR)
    case Warning = opaque(D3D12_MESSAGE_SEVERITY_WARNING)
    case Info = opaque(D3D12_MESSAGE_SEVERITY_INFO)
    case Message = opaque(D3D12_MESSAGE_SEVERITY_MESSAGE)
}

[[facade]]
variant MessageID : opaque(D3D12_MESSAGE_ID) {
    default Unknown = opaque(D3D12_MESSAGE_ID_UNKNOWN)
    // dont fill in the rest, theres over 1000 of them
    // we'll add them as we need them
}

///
/// render state
///

variant WindowState {
    default Unknown // window state is unknown

    case Windowed // window is visible, and active, but not fullscreen
    case Fullscreen // window is visible, and active, and fullscreen
    case Unfocused // window is visible, but not active
    case Minimized // window is not visible
}

[[bitflags]]
variant ObjectDep {
    case Device = (1 << 0) // all device objects
    case SwapChain = (1 << 1) // backbuffer count, format, resolution, etc
}
